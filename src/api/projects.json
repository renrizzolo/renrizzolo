[
  {
    "id": "1",
    "slug": "react-native-sectioned-multi-select",
    "coverImage": "/assets/projects/rnsms.png",
    "datePublished": "2019-08-08T01:00",
    "heading": "React Native Sectioned Multi Select",
    "subHeading": "A highly configurable select component for React Native",
    "link": "https://npmjs.com/package/react-native-sectioned-multi-select",
    "tags": ["React Native", "Javscript"],
    "category": "library",
    "details": "<h3>A customizable sectioned multi-select</h3><p>I was looking for a select component that could be used for category/sub category selection.</p><p>When nothing that fit my needs turned up, I started working on my own modal based multi-select component.</p><p>I thought it would be a great project to open source!</p><p><br></p><h3>Open source</h3><p>Iterating on this openly has taught me a lot, and it has been great to help and be helped by community members.</p><p>This is my most popular open source project with 1200+ weekly downloads on NPM.</p>"
  },
  {
    "id": "2",
    "slug": "react-native-swipeable-rating",
    "coverImage": "/assets/projects/rnsr.png",
    "datePublished": "2019-08-07T01:00",
    "heading": "React Native Swipeable Rating",
    "subHeading": "A React Native star rating component with swipe & tap support",
    "link": "https://npmjs.com/package/react-native-swipeable-rating",
    "tags": ["React Native", "Javscript"],
    "category": "library",
    "details": "<h3>About</h3><p>I tried a few different Star Rating libraries for React Native, but none of them quite functioned how I wanted.</p><p>This was also a good opportunity for me to learn how to use the <a href=\"https://facebook.github.io/react-native/docs/panresponder\" target=\"_blank\">panResponder</a>!</p><p><br></p><h3>Functionality</h3><p>Stars can be either tapped or swiped through to select the desired rating.</p><p>The rating can also be controlled by a prop, so you can easily set its initial value (e.g if coming from an API).</p><p>swiping/tapping can also be disabled if you just need a sleek looking star rating.</p>"
  },
  {
    "id": "3",
    "slug": "casual-sparks",
    "coverImage": "/assets/projects/casual-sparks.png",
    "datePublished": "2019-08-06T14:01",
    "heading": "Casual Sparks",
    "subHeading": "Record label website with custom Sound Cloud player",
    "link": "https://casualsparks.com",
    "tags": ["Javscript", "React", "Gatsby"],
    "category": "website",
    "details": "<h3>About</h3><p>A React + Gatsby site styled with SCSS, with some <a href=\"https://react-spring.surge.sh\" target=\"_blank\">React Spring</a> for animations.</p><p><br></p><p><img src=\"/assets/uploads/1562212887609-caspa-mob.png\"></p><p><br></p><p>The SoundCloud player includes playlist support, seeking and keyboard control.</p><p>I utilizied the React Context API to sync the release items' play state to the global player.</p><p><br></p><p>The site is deployed on Netlify and uses Netlify CMS for creating &amp; updating the markdown files (Artists, Releases, pages).</p>"
  },
  {
    "id": "4",
    "slug": "ren-rizzolo",
    "coverImage": "/assets/projects/renrizzolo-web.png",
    "datePublished": "2019-08-09T01:00",
    "heading": "Ren Rizzolo",
    "subHeading": "Simple portfolio site with custom route transitions component and colour theme picker",
    "link": "https://renrizzolo.com",
    "tags": ["Javscript", "Stencil JS", "CSS variables", "NodeJS"],
    "category": "website",
    "details": "<h3>Stencil</h3><p>I wanted to try something different, so I chose the <a href=\"https://stenciljs.com\" target=\"_blank\">Stencil</a> web components framework.</p><p>It has a similar API to React, and uses JSX so it wasn't hard to get started, despite a few quirks.</p><p>This was also a nice opportunity to use TypeScript too, something I hadn't had the chance to be exposed to.</p><p>I built a route transition animation component and a generic transition component with trailing animation capability.</p><p><br></p><h3>Bodymovin / Lottie</h3><p>I started out just animating the svg wave with css, which although it worked well it was a little cpu intensive (animating background-position, which causes repaints).</p><p>I had heard about Lottie through my React Native development, so I thought I'd give it a go.</p><p>It was a pretty simple process of creating the animation in After Effects, exporting it to JSON with the Body Movin extension, then playing it with the Lottie web player.</p><p>As well as the wave animation, I incorporated it into the hover state of icons, which really gave them life!</p><p><br></p><h3>Express 'backend'</h3><p>I made a really basic api in node to be able to create/update/delete the project items, and upload image files. I used Quill for rich text editing / inline image uploads.</p><p>A single JSON file contains all of the project data, and is moved to the Stencil project's src folder when projects are created/updated/deleted.</p><p><br></p><p><img src=\"/assets/uploads/1565848999682-Screen Shot 2019-08-15 at 4.02.38 pm.png\"></p><p><br></p><p> </p>"
  },
  {
    "id": "5",
    "slug": "property-weekly",
    "coverImage": "/assets/projects/property-weekly.png",
    "datePublished": "2017-02-03T14:00",
    "heading": "Property Weekly",
    "subHeading": "Bespoke Realestate website built on WordPress",
    "link": "",
    "tags": ["WordPress", "Bootstrap", "Jquery", "SCSS", "PHP"],
    "category": "website",
    "details": "<h3>Wordpress based Property website</h3><p>The heart of the site is a custom WordPress theme. The site styling is mobile first, and themed using SCSS. I build it with Bootstrap and the Bones WP starter theme.</p><p>Advanced Custom Fields was used for custom featured property articles, with property data specific fields like Auction info, agent and number of beds/bathrooms/car spaces.</p><p><img src=\"/assets/uploads/1562220001869-pw-articles.jpg\"></p><p><br></p><h3>RealestateView API integration</h3><p>Property Weekly uses the RealestateView API for Australian real estate listing data.</p><p>Listings are displayed as a grid, list or map.</p><p>Individual listings are served as virtual wordpress pages, making them SEO friendly.</p><p>Various widgets were built for displaying a featured listing on the front page, or a grid of properties from a featured agent.</p><p><img src=\"/assets/uploads/1562220224007-pw-listing.jpg\"></p><p><br></p><h3>Digital Edition viewer</h3><p>PDFJS based print edition browser. A new post type was created for pdfs, with an easy pdf upload form using the WordPress media browser.</p><p><img src=\"/assets/uploads/1562219720753-pw-pdfs.jpg\"></p><p><br></p><p><br></p>"
  },
  {
    "id": "6",
    "slug": "subscribe-jewishnews",
    "coverImage": "/assets/projects/subscribe-jewishnews.png",
    "datePublished": "2016-06-16T15:01",
    "heading": "Jewish News Subscriptions",
    "subHeading": "Subscriptions platform for The Australian Jewish News",
    "link": "https://subscribe.jewishnews.net.au",
    "tags": ["Bootstrap", "jQuery", "SCSS"],
    "category": "website",
    "details": "<p>Online &amp; print subscriptions website built with membership framework Amember (PHP). Uses Stripe for payments with recurring subscriptions. Grants digital access to apps &amp; online epaper system through an API.</p><p>The front end theme is custom built using Bootstrap and jQuery, with grunt for js/css minification and other tasks.</p><p><br></p><p><img src=\"/assets/uploads/1563846745209-ajn-subscribe-epapers.jpg\"></p>"
  },
  {
    "id": "7",
    "slug": "pdfs-jewishnews",
    "coverImage": "/assets/projects/pdfs-screen.png",
    "datePublished": "2018-05-12T14:00",
    "heading": "Jewish News PDFs",
    "subHeading": "PDF repository for finding & disseminating supplements & tear sheets.",
    "link": "",
    "tags": ["nodeJS", "postgresQL", "React", "Apollo", "graphql", "AWS"],
    "category": "website",
    "details": "<h3>Overview</h3><p>A React/Node PWA with code splitting &amp; server side rendering.</p><p><br></p><p>The main purpose of the application is to serve as an easy way for sales staff to find and distribute pdfs of publications (tear sheets) to clients.</p><h3><br></h3><h3>PDF catalog</h3><p>The PDF catalog can easily be filtered and searched based on edition name, publication title, upload date, publication date. From the context menu, users have quick access to download, get the link or compose an email containing the link/edition information.</p><p><img src=\"/assets/uploads/1563849691954-ajn-pdfs-list-view-mobile.jpg\"></p><p><br></p><h3>Pdf Viewer</h3><p>I built a React pdf viewer on top of react-pdf (a React wrapper for PDFJS), with gesture controls handled by HammerJS.</p><p><img src=\"/assets/uploads/1563844272270-ajn-pdfs-pdf-view.jpg\"></p><h3>Tech overview</h3><p>The back end is <strong>NodeJS</strong> running in a <strong>Docker</strong> container (on a linux server). The database is PostgresQL, and the API is <strong>graphql</strong> (schema is auto-generated by the amazing <a href=\"https://www.graphile.org/postgraphile/\" target=\"_blank\"><strong>Postgraphile</strong></a>).</p><p>On the front-end: <strong>React</strong>, <strong>React Router</strong>, <strong>Redux</strong> and <strong>React Apollo</strong> are used. For fast UI development, I chose to build the UI with <strong>Material UI</strong>.</p><p><br></p><p>PDFs are uploaded to the server, then collated (if multiple files present), and compressed, with <strong>Ghostscript</strong>. Images of each page are generated and compressed / resized as thumbnails. Following this, the pdf and thumbnails are uploaded to <strong>Amazon S3</strong> buckets. A basic link shortener service was also created for the PDF viewer links.</p><p><br></p><p>User Authentication is done with <strong>JSON Web Tokens</strong>, and there are 4 roles with varying read/write/access levels. <strong>Amazon SES</strong> is used for transactional emails e.g the password reset flow.</p>"
  },
  {
    "id": "8",
    "slug": "lightgallery-for-gutenberg",
    "coverImage": "/assets/uploads/lightgallery-for-gutenberg.png",
    "datePublished": "2019-01-18T12:00",
    "heading": "Lightgallery for Gutenberg",
    "subHeading": "WordPress Gutenberg gallery plugin",
    "link": "https://github.com/renrizzolo/light-gallery-for-gutenberg",
    "tags": ["WordPress", "PHP"],
    "category": "library",
    "details": "<h3>About</h3><p>I started playing around with WordPress Gutenberg, knowing that the 5.0 update was not too far off. I already had built a gallery plugin with Lightgallery, and saw the need for a proper slider gallery in Gutenberg (the native gallery only displays a grid of images, no expanding/slideshow).</p><p><br></p><p><img src=\"/assets/uploads/1562204606775-lightgallery-gutenberg.png\"></p><p><br></p><p>I improved upon my previous implementation by combining <a href=\"https://sachinchoolur.github.io/lightGallery/\" target=\"_blank\">Lightgallery</a> and <a href=\"http://sachinchoolur.github.io/lightslider\" target=\"_blank\">Lightslider</a>, so the editor can (optionally) display a slider/carousel within the article, that can be expanded to a full-screen gallery.</p><p><br></p><p><br></p>"
  },
  {
    "id": "9",
    "slug": "ajn-advertising",
    "coverImage": "/assets/uploads/1565663575872-cover--ajn-4dvertise.png",
    "datePublished": "2019-10-28T00:00",
    "heading": "AJN Advertising",
    "subHeading": "Advertising microsite redesigned to mimic the AJN media kit",
    "link": "https://advertise.jewishnews.net.au",
    "tags": ["Gatsby", "React", "Contentful", "Styled Components"],
    "category": "website",
    "details": "<h3>The dream stack</h3><p>Gatsby / React / Styled Components / Contentful / Netlify is my current favourite stack for creating static websites (they can of course be dynamic – hello serverless functions).</p><p>It's just <strong>so fast</strong>, both in terms of development/deployment time and page speed.</p><p><img src=\"/assets/uploads/1565664654141-ajn-4dvertise-1.png\"></p><h3>One page advertising site reimagined</h3><p>I built the site to have a 1:1 relationship with the content of our media kit print out / PDF. All of the sizing and specs is displayed in neat tables / grids.</p><p><img src=\"/assets/uploads/1565664622908-ajn-4dvertise-2.png\"></p><p>I made a global search with <a href=\"https://lunrjs.com/\" target=\"_blank\">Lunr</a>, making it easy to find exactly what you're looking for.</p><p>I took advantage of the <a href=\"/pdfs-jewishnews\" target=\"_blank\">AJN Pdfs</a> graphql API in order to always have the freshest editions of the Media Kit pdf and Supplement example pdfs.</p><p><br></p><h3>Unified content</h3><p>All of the images and text content, and various other configurations, are stored in Contentful. Editors and developers alike can easily update content without the need for code changes or FTPing of static assets.</p><p><img src=\"/assets/uploads/1565666910379-ajn-4dvertise-contentful.jpg\"></p><p><br></p><h3>Contentful table extension</h3><p>I built a Contentful JSON object field extension for this project, so table data could be edited inline in Contentful.</p><p>Check it out here: <a href=\"https://github.com/renrizzolo/contentful-json-table\" target=\"_blank\">https://github.com/renrizzolo/contentful-json-table</a></p>"
  },
  {
    "id": "10",
    "slug": "jfind",
    "coverImage": "/assets/uploads/1572316643391-jfind-desktop-web.png",
    "datePublished": "2019-10-29T12:00",
    "heading": "Jfind",
    "subHeading": "Feature rich business directory website & app",
    "link": "https://jfind.com.au",
    "tags": ["React Native", "Auth0", "WP Rest API", "WordPress"],
    "category": "website",
    "details": "<p>This is by far the biggest project I've ever done! (nearly 1000 commits to the app repo).</p><p><br></p><h3>The website</h3><p>The Jfind website is based on the Listify WordPress directory theme, which allows end users to easily add their own listings, and integrates with WooCommerce for payments/subscriptions.</p><p>I implemented SSO login with Auth0 - enabling me to have a single login source for the app and web.</p><p>Customization (via hooks) to the WP Rest API was required, e.g adding custom meta fields and endpoints for adding favourites, retrieving listings, posting reviews.</p><p><img src=\"/assets/uploads/1572317860060-jfind-map-desktop.jpg\"></p><p><br></p><h3><br></h3><h3>The app</h3><p>The Jfind app was built with React Native for both iOS and android (concurrently, with feature parity).</p><p>I used appcenter to streamline CI, building, deployment and store publishing.</p><p><img src=\"/assets/uploads/1572318509766-jfind-android-store.jpg\"></p><p><br></p><p><strong>Features overview</strong></p><p>Intent filters (open listings directly in app from the website)</p><p>Remote Push Notifications (including link directly to a listing)</p><p>Remote config (for CTA data and other options)</p><p>Google Maps</p><p>Map pin clustering (supercluster)</p><p>Geolocation based searching</p><p>Google places autocomplete</p><p>Redux store</p><p>JWT based authentication</p><p>Review/comment posting</p><p>Favourites</p><p>external API news feed/article browser</p><p>Code push updates</p><p>Native navigation with react-native-navigation v2</p><p><br></p><p><br></p>"
  },
  {
    "id": "11",
    "slug": "contentful-json-table",
    "coverImage": "/assets/uploads/1587948272314-contentful-json-ex.png",
    "datePublished": "2020-02-10T12:00",
    "heading": "Contentful JSON Table",
    "subHeading": "A Contentful field extension for the Object field type, designed for creating nice tables.",
    "link": "https://github.com/renrizzolo/contentful-json-table",
    "tags": ["Contentful", "React"],
    "category": "library",
    "details": "<p>I needed to display JSON data in tables for <a href=\"https://renrizzolo.com/project/ajn-advertising\" target=\"_blank\">AJN Advertising</a>, so I built this extension for content editors to be able to easily WYSIWYG edit the table inside the Contentful CMS.</p>"
  },
  {
    "id": "12",
    "slug": "rizzolo-guitars",
    "coverImage": "/assets/uploads/1587948945588-rizzolo-guitars-cover.png",
    "datePublished": "2020-04-26T12:00",
    "heading": "Rizzolo Guitars",
    "subHeading": "Bespoke static site showcasing hand made instruments",
    "link": "https://rizzologuitars.com",
    "tags": ["React", "Gatsby", "Styled System", "React Spring", "Contentful"],
    "category": "website",
    "details": "<p>It was a pleasure to re-build my father's website in order to truly showcase his amazing instruments!</p><p><br></p><p>I prototyped the home and instruments pages/cards, and key design elements (colours, typography, grid, spacing) in Adobe XD.</p><p><br></p><p><img src=\"/assets/uploads/1587949845238-rizzolo-guitars-xd.jpg\"></p><p><br></p><p>Once I was happy with the overall design concept, I moved to building components with Styled System, creating a minimal UI library using Storybook.</p><p><br></p><p>I then started the Gatsby project and began to lay out the home page. In the mean-time I set up Contentful and started creating pages/sections as needed. Over time the design evolved to be less sharp (softer shadows, larger border radii/rounded buttons).</p><p><br></p><p><img src=\"/assets/uploads/1587950317495-rizzolo-guitars-instrument.jpg\"></p><p><br></p><p>I wanted to use a cover video for the home page, but didn't want it to be shown right away, as I felt it can be a bit jarring seeing a large auto-playing video immediately. I used Scroll Magic to reveal the video after scrolling past the initial cover image. An SVG clip path was used to reveal the video with the curve of an acoustic guitar body.</p><p><br></p><p><img src=\"/assets/uploads/1587950263319-rizzolo-guitars-mobile-header.png\"></p><p><br></p><p>I really enjoyed building this site, and particularly benefited from the theming and quick UI development that Styled System allows.</p><p><br></p><p>P.S I took a lot of the instrument photos so I'm extra proud of this one!</p>"
  },
  {
    "id": "13",
    "slug": "gatsby-theme-golden-condor",
    "coverImage": "/assets/uploads/1650680724122-gtgc-frame-2.png",
    "datePublished": "2022-04-23T12:18",
    "heading": "Gatsby Theme Golden Condor",
    "subHeading": "",
    "link": "https://gatsby-theme-golden-condor.netlify.app/",
    "tags": ["Gatsby", "React", "Theme-UI", "MDX"],
    "category": "website",
    "details": "<p>A gatsby 4 theme with&nbsp;<strong>MDX</strong>&nbsp;support,&nbsp;<strong>theming</strong>&nbsp;&amp;&nbsp;<strong>dark mode</strong>&nbsp;via&nbsp;<a href=\"https://theme-ui.com/\" target=\"_blank\" style=\"color: var(--theme-ui-colors-primary-2);\"><strong>theme-ui</strong></a>, unlimited&nbsp;<strong>collections</strong>&nbsp;(custom post types), configurable&nbsp;<strong>layouts</strong>, built in&nbsp;<strong>SEO</strong>, component shadowing and more.</p><p><br></p>"
  },
  {
    "id": "14",
    "slug": "property-weekly-v2",
    "coverImage": "/assets/uploads/1675232864388-pw-properties-page.png",
    "datePublished": "2021-01-01T00:00",
    "heading": "Property Weekly v2",
    "subHeading": "Gatsby real estate website with headless CMS",
    "link": "",
    "tags": ["Gatsby", "React", "Headless Wordpress", "graphql", "Linaria"],
    "category": "website",
    "details": "<p>This project involved some heavy customization both on the WordPress and the Gatsby node side.</p><p><br></p><ul><li>Custom post types for PDF editions and Agent profiles</li><li>Custom Gutenberg plugin for visual layout of posts</li><li>Custom Gutenberg block for displaying property listings on any page</li><li>Graphql resolvers for proxying 3rd party property listing API through WordPress and into graphql API</li><li>Automatic build/deploy</li></ul><p><br></p><p><strong>Gutenberg layout editing</strong></p><p>Posts can be curated or left as automatic feeds of specific categories or tags.</p><p><br></p><iframe class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\" src=\"/assets/uploads/pw-blocks.mp4\"></iframe><p><br></p><p><br></p><p><strong>Initial design</strong></p><p>I mocked the home page up in XD.</p><p><img src=\"/assets/uploads/1675223866087-PW-Web-1920-1.jpg\"></p><p><br></p><p><strong>Article</strong></p><p><strong><span class=\"ql-cursor\">﻿</span></strong><img src=\"/assets/uploads/1675233299355-pw-article-cover-c.png\"></p><p><br></p><p><br></p><p><strong>Property listing</strong></p><p><img src=\"/assets/uploads/1675232843697-pw-listing-page.png\"></p>"
  },
  {
    "id": "15",
    "slug": "nothing-but-photos",
    "coverImage": "/assets/uploads/1693372840584-og-image.jpg",
    "datePublished": "2023-08-30T15:21",
    "heading": "Nothing But Photos",
    "subHeading": "Minimal photo gallery with an infinite x/y draggable photo grid",
    "link": "https://nothingbut.photos",
    "tags": ["Astro", "React", "Tailwind CSS", "React Spring"],
    "category": "website",
    "details": "<p>Nothing But Photos is a no-frills way for me to showcase some of my street/travel/architectue/film photography.</p><p><br></p><p>The concept is simple; a folder full of photos is displayed as a thumbnail grid, each photo links to its own page with information extracted from the photo's EXIF data.</p><p><br></p><p>I chose Astro because it's very good at SSG (static site generation), and is very light weight. React is used mainly for the gesture/spring animations, however I'm exploring a more light weight version using svelte.</p><p><br></p><p>I used Tailwind because it's easy, and the site is small enough to not really have to worry about any scaling issues it introduces.</p>"
  }
]
